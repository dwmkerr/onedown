{"version":3,"sources":["app.js","menu/od-menu.js","services/alertsservice.js","services/identityservice.js","components/od-alerts/od-alerts.js","components/od-crossword/od-crossword.js","pages/create/createcontroller.js","pages/crossword/crosswordcontroller.js","pages/crosswords/crosswordscontroller.js","pages/home/homecontroller.js"],"names":["app","angular","module","config","$routeProvider","when","templateUrl","controller","requiresLogin","resolve","crosswords","$http","AlertsService","get","then","response","data","error","crossword","$route","current","params","crosswordId","otherwise","authProvider","init","domain","clientID","callbackURL","location","href","loginUrl","$httpProvider","jwtInterceptorProvider","tokenGetter","store","interceptors","push","run","auth","hookEvents","$rootScope","jwtHelper","$location","$on","isAuthenticated","token","isTokenExpired","path","authenticate","directive","IdentityService","restrict","link","scope","login","ensureLoggedIn","logout","signout","remove","isLoggedIn","factory","this","alerts","prototype","title","message","type","info","$q","deferred","defer","profile","signin","set","promise","selectedClue","crosswordHeight","element","crosswordDom","CrosswordsJS","CrosswordDOM","selectClue","cleanupSelectedClueWatch","$watch","newValue","oldValue","undefined","onStateChanged","change","currentClue","$apply","destroy","$","crosswordElement","height","$scope","setter","solution","allClues","acrossClues","concat","downClues","clueMap","i","length","number","answers","clueCode","answer","crosswordModel","Crossword","isSelected","clue","save","clues","code","post","_id","check","source","url"],"mappings":"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","file":"app.min.js","sourcesContent":["var app = angular.module('app', ['ngRoute', 'auth0', 'angular-storage', 'angular-jwt'])\r\n  .config(function($routeProvider, $locationProvider) {\r\n\r\n    $routeProvider\r\n      .when('/create', {\r\n        templateUrl: 'app/pages/create/create.html',\r\n        controller: 'CreateController',\r\n        requiresLogin: true\r\n      })\r\n      .when('/crosswords', {\r\n        templateUrl: 'app/pages/crosswords/crosswords.html',\r\n        controller: 'CrosswordsController',\r\n        resolve: {\r\n          crosswords: function($http, AlertsService) {\r\n            return $http.get('api/crosswords').then(function(response) { \r\n              return response.data; \r\n            }, function(err) {\r\n              AlertsService.error('Sorry', 'There was a problem loading the crosswords.');\r\n            });\r\n          }\r\n        }\r\n      })\r\n      .when('/crosswords/:crosswordId', {\r\n        templateUrl: 'app/pages/crossword/crossword.html',\r\n        controller: 'CrosswordController',\r\n        resolve: {\r\n          crossword: function($route, $http) {\r\n            return $http.get('api/crosswords/' + $route.current.params.crosswordId).then(function(response) { \r\n              return response.data; \r\n            }, function(err) {\r\n              AlertsService.error('Sorry', 'There was a problem loading the crossword.');\r\n            });\r\n          }\r\n        }\r\n      })\r\n      .otherwise({\r\n        templateUrl: 'app/pages/home/home.html',\r\n        controller: 'HomeController'\r\n      });\r\n\r\n  })\r\n  .config(function (authProvider) {\r\n    authProvider.init({\r\n      domain: 'dwmkerr.auth0.com',\r\n      clientID: 'oWeXhqDS5VLh8asTvNUEqKFA6wIbGIsJ',\r\n      callbackURL: location.href,\r\n      // Here we add the URL to go if the user tries to access a resource he can't because he's not authenticated\r\n      loginUrl: '/login'\r\n    });\r\n  })\r\n  .config(function (authProvider, $httpProvider, jwtInterceptorProvider) {\r\n\r\n    // We're annotating this function so that the `store` is injected correctly when this file is minified\r\n    jwtInterceptorProvider.tokenGetter = ['store', function(store) {\r\n      // Return the saved token\r\n      return store.get('token');\r\n    }];\r\n\r\n    $httpProvider.interceptors.push('jwtInterceptor');\r\n  })\r\n  .run(function(auth) {\r\n    // This hooks al auth events to check everything as soon as the app starts\r\n    auth.hookEvents();\r\n  })\r\n  .run(function($rootScope, auth, store, jwtHelper, $location) {\r\n    // This events gets triggered on refresh or URL change\r\n    $rootScope.$on('$locationChangeStart', function() {\r\n      if (!auth.isAuthenticated) {\r\n        var token = store.get('token');\r\n        if (token) {\r\n          if (!jwtHelper.isTokenExpired(token)) {\r\n            auth.authenticate(store.get('profile'), token);\r\n          } else {\r\n            // Either show Login page or use the refresh token to get a new idToken\r\n            $location.path('/');\r\n          }\r\n        }\r\n      }\r\n    });\r\n  });","angular.module('app').directive('odMenu', function($location, auth, store, IdentityService) {\r\n  return {\r\n    restrict: 'E',\r\n    templateUrl: 'app/menu/od-menu.html',\r\n    link: function(scope, element, attrs) {\r\n\r\n      scope.auth = auth;\r\n\r\n\r\n      scope.login = function() {\r\n        IdentityService.ensureLoggedIn();\r\n      };\r\n\r\n      scope.logout = function() {\r\n        auth.signout();\r\n        store.remove('profile');\r\n        store.remove('token');\r\n      };\r\n\r\n      scope.isLoggedIn = function() {\r\n        return auth.isAuthenticated;\r\n      };\r\n\r\n    }\r\n  };\r\n});","angular.module('app').factory('AlertsService', function() {\r\n\r\n  function AlertsService() {\r\n\r\n    this.alerts = [];\r\n\r\n  }\r\n\r\n  //  Logs an error.\r\n  AlertsService.prototype.error = function error(title, message) {\r\n    \r\n    this.alerts.push({\r\n      type: 'error',\r\n      title: title,\r\n      message: message\r\n    });\r\n\r\n  };\r\n\r\n  AlertsService.prototype.info = function info(title, message) {\r\n    \r\n    this.alerts.push({\r\n      type: 'info',\r\n      title: title,\r\n      message: message\r\n    });\r\n\r\n  };\r\n\r\n  return new AlertsService();\r\n});","angular.module('app').factory('IdentityService', function($q, auth, store) {\r\n\r\n  function IdentityService() {\r\n\r\n  }\r\n\r\n  //  Returns a promise resolved immediately with the profile if logged in,\r\n  //  or after login otherwise. Rejected for login failure.\r\n  IdentityService.prototype.ensureLoggedIn = function ensureLoggedIn() {\r\n    \r\n    var deferred = $q.defer();\r\n    if(auth.isAuthenticated) {\r\n      deferred.resolve(auth.profile);\r\n    } else {\r\n      auth.signin({}, function(profile, token) {\r\n        store.set('profile', profile);\r\n        store.set('token', token);\r\n        deferred.resolve(profile);\r\n      });\r\n    }\r\n    return deferred.promise;\r\n\r\n  };\r\n\r\n  return new IdentityService();\r\n});","angular.module('app').directive('odAlerts', function(AlertsService) {\r\n\r\n  return {\r\n    restrict: \"E\",\r\n    templateUrl: \"app/components/od-alerts/od-alerts.html\",\r\n    scope: {\r\n    },\r\n    link: function(scope, element, attributes) {\r\n\r\n      scope.alerts = AlertsService.alerts;\r\n\r\n    }\r\n  };\r\n\r\n});","angular.module('app').directive('odCrossword', function() {\r\n\r\n  return {\r\n    restrict: \"E\",\r\n    templateUrl: \"app/components/od-crossword/od-crossword.html\",\r\n    scope: {\r\n      crossword: \"=\",\r\n      selectedClue: \"=\",\r\n      crosswordHeight: \"=\"\r\n    },\r\n    link: function(scope, element, attributes) {\r\n\r\n      //  Create the crossword DOM.\r\n      var crosswordDom = new CrosswordsJS.CrosswordDOM(scope.crossword, element[0]);\r\n\r\n      //  Set the selection if we have one.\r\n      if(scope.selectedClue) {\r\n        crosswordDom.selectClue(scope.selectedClue);\r\n      }\r\n      \r\n      //  Update the selected clue when needed.\r\n      var cleanupSelectedClueWatch = scope.$watch('selectedClue', function(newValue, oldValue) {\r\n        if(newValue !== oldValue && newValue !== undefined) {\r\n          crosswordDom.selectClue(scope.selectedClue);\r\n        }\r\n      });\r\n\r\n      //  Watch for notifications.\r\n      crosswordDom.onStateChanged = function(change) {\r\n        //  TODO: selecting a clue fires a state change message.\r\n        if(change.message === \"clueSelected\") {\r\n          if(scope.selectedClue !== crosswordDom.currentClue) {\r\n            scope.selectedClue = crosswordDom.currentClue;\r\n            scope.$apply();\r\n          }\r\n        }\r\n      };\r\n\r\n      //  Cleanup on scope destroy.\r\n      scope.$on('$destroy', function() {\r\n        cleanupSelectedClueWatch();\r\n        crosswordDom.destroy();\r\n      });\r\n\r\n      scope.crosswordHeight = $(crosswordDom.crosswordElement).height();\r\n\r\n    }\r\n  };\r\n\r\n});","angular.module('app').controller('CreateController', function($scope) {\r\n\r\n});","angular.module('app').controller('CrosswordController', function($scope, $q, $http, auth, IdentityService, AlertsService, crossword) {\r\n\r\n\r\n  $scope.title = crossword.title;\r\n  $scope.setter = crossword.setter;\r\n\r\n  //  Our crossword might contain a solution. If it does, but each answer in the clue\r\n  //  (which is the shape required by the CrosswordsJS class).\r\n  if(crossword.solution) {\r\n\r\n    var allClues = crossword.acrossClues.concat(crossword.downClues);\r\n    var clueMap = {};\r\n    for(var i=0; i<allClues.length; i++) {\r\n      clueMap[allClues[i].number + (i < crossword.acrossClues.length ? 'a' : 'd')] = allClues[i];\r\n    }\r\n\r\n    for(i=0; i<crossword.solution.answers.length; i++) {\r\n      clueMap[crossword.solution.answers[i].clueCode].answer = crossword.solution.answers[i].answer;\r\n    }\r\n  }\r\n\r\n  //  Create the crossword model from the crossword definition. (TODO in router?)\r\n  var crosswordModel = new CrosswordsJS.Crossword(crossword);\r\n  $scope.crossword = crosswordModel;  \r\n  $scope.acrossClues = crosswordModel.acrossClues;\r\n  $scope.downClues = crosswordModel.downClues;\r\n\r\n  $scope.isSelected = function isSelected(clue) {\r\n    return clue === $scope.selectedClue;\r\n  };\r\n\r\n  $scope.selectClue = function selectClue(clue) {\r\n    $scope.selectedClue = clue;\r\n  };\r\n\r\n  $scope.save = function save() {\r\n    //  If we are going to save we'd better be logged in.\r\n    IdentityService.ensureLoggedIn().then(function() {\r\n      \r\n      //  Build a solution to send.\r\n      var solution = {\r\n        answers: []\r\n      };\r\n\r\n      //  Go though the model and pull out all clues.\r\n      var clues = crosswordModel.acrossClues.concat(crosswordModel.downClues);\r\n      for(var i=0; i<clues.length; i++) {\r\n        if(clues[i].answer) {\r\n          solution.answers.push({\r\n            clueCode: clues[i].code,\r\n            answer: clues[i].answer\r\n          });\r\n        }\r\n      }\r\n      $http.post('api/crosswords/' + crossword._id + '/solution', solution).then(function() {\r\n\r\n      }, function(err) {\r\n        AlertsService.error('Sorry', 'There was a problem saving your answers.');\r\n      });\r\n\r\n    });\r\n  };\r\n\r\n  $scope.check = function check() {\r\n    if(!crossword.answer) {\r\n      AlertsService.info('Sorry', \"We don't have the solutuion for this crossword. You can check the \" + \r\n        \"original at \" + crossword.source.url);  \r\n    }\r\n    \r\n  };\r\n\r\n});","angular.module('app').controller('CrosswordsController', function($scope, crosswords) {\r\n\r\n  $scope.crosswords = crosswords;\r\n\r\n});","angular.module('app').controller('HomeController', function() {\r\n\r\n});"],"sourceRoot":"/source/"}